{"version":3,"file":"index2.7bb86833.js","sources":["../../node_modules/element-plus/es/hooks/use-id/index2.mjs"],"sourcesContent":["import { inject, computed, unref } from 'vue';\nimport { isClient } from '@vueuse/core';\nimport '../../utils/index2.mjs';\nimport { debugWarn } from '../../utils/error2.mjs';\n\nconst defaultIdInjection = {\n  prefix: Math.floor(Math.random() * 1e4),\n  current: 0\n};\nconst ID_INJECTION_KEY = Symbol(\"elIdInjection\");\nconst useId = (deterministicId) => {\n  const idInjection = inject(ID_INJECTION_KEY, defaultIdInjection);\n  if (!isClient && idInjection === defaultIdInjection) {\n    debugWarn(\"IdInjection\", `Looks like you are using server rendering, you must provide a id provider to ensure the hydration process to be succeed\nusage: app.provide(ID_INJECTION_KEY, {\n  prefix: number,\n  current: number,\n})`);\n  }\n  const idRef = computed(() => unref(deterministicId) || `el-id-${idInjection.prefix}-${idInjection.current++}`);\n  return idRef;\n};\n\nexport { ID_INJECTION_KEY, useId };\n//# sourceMappingURL=index2.mjs.map\n"],"names":["defaultIdInjection","prefix","Math","floor","random","current","ID_INJECTION_KEY","Symbol","useId","deterministicId","idInjection","inject","computed","unref"],"mappings":"sDAKA,MAAMA,EAAqB,CACzBC,OAAQC,KAAKC,MAAsB,IAAhBD,KAAKE,UACxBC,QAAS,GAELC,EAAmBC,OAAO,iBAC1BC,EAASC,IACP,MAAAC,EAAcC,EAAOL,EAAkBN,GAStC,OADOY,GAAS,IAAMC,EAAMJ,IAAoB,SAASC,EAAYT,UAAUS,EAAYL"}